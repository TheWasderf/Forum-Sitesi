func serveThread(w http.ResponseWriter, r *http.Request) {
    threadID := r.URL.Query().Get("id")
    if threadID == "" {
        http.Error(w, "Thread ID is required", http.StatusBadRequest)
        return
    }

    var thread Thread
    err := db.QueryRow("SELECT id, title, description, likes, dislikes FROM threads WHERE id = ?", threadID).Scan(&thread.ID, &thread.Title, &thread.Description, &thread.Likes, &thread.Dislikes)
    if err != nil {
        http.Error(w, "Failed to fetch thread", http.StatusInternalServerError)
        return
    }
log.Printf("Fetching categories for thread ID: %s", threadID)
        // Fetch categories for the thread
    categoryRows, err := db.Query("SELECT c.name FROM categories c JOIN thread_categories tc ON c.id = tc.category_id WHERE tc.thread_id = ?", threadID)
    if err != nil {
        http.Error(w, "Failed to fetch categories", http.StatusInternalServerError)
        return
    }
    defer categoryRows.Close()

    var categories []string
    for categoryRows.Next() {
        var categoryName string
        if err := categoryRows.Scan(&categoryName); err != nil {
            log.Printf("Error reading category %v", err)
            http.Error(w, "Failed to read category data", http.StatusInternalServerError)
            return
        }
        categories = append(categories, categoryName)
    }
    log.Printf("Categories found: %v", categories)

    cookie, err := r.Cookie("session_token")
    if err != nil {
        http.Error(w, "Failed to retrieve session data", http.StatusInternalServerError)
        return
    }
    username, _, err := getUserFromSession(cookie.Value) // Updated to use getUserFromSession
    if err != nil {
        http.Error(w, "Failed to validate session", http.StatusInternalServerError)
        return
    }
    isGuest := username == "guest"

    rows, err := db.Query("SELECT content, username FROM comments JOIN users ON users.id = comments.user_id WHERE thread_id = ?", threadID)
    if err != nil {
        http.Error(w, "Failed to fetch comments", http.StatusInternalServerError)
        return
    }
    defer rows.Close()

    var comments []Comment
    for rows.Next() {
        var comment Comment
        if err := rows.Scan(&comment.Content, &comment.Username); err != nil {
            http.Error(w, "Failed to read comment data", http.StatusInternalServerError)
            return
        }
        comments = append(comments, comment)
    }

    tmpl := template.Must(template.ParseFiles("templates/thread.html"))
    fmt.Printf("Categories: %+v\n", categories)
    tmpl.Execute(w, map[string]interface{}{
        "Thread":   thread,
        "Categories":   categories,
        "Comments": comments,
        "IsGuest":  isGuest,
    })
}
















konunun kimin tarafindan olusturuldugu bastirmasi icin kod degistirdik, onceden boyleydi
t.id sekline gecti id yerine ve username kullanilamadigi icin c.username olarak vs. degistirildi
ama onceden boyleydi
